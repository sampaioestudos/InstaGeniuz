
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleGenAI } from "@google/genai";
import type { PostTypeId } from '../types';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

export default async function handler(req: VercelRequest, res: VercelResponse) {
    // Handle OPTIONS request for CORS preflight
    if (req.method === 'OPTIONS') {
        res.setHeader('Access-Control-Allow-Credentials', 'true');
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        return res.status(204).send('');
    }

    if (req.method !== 'POST') {
        res.setHeader('Allow', 'POST');
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    if (!GEMINI_API_KEY) {
        return res.status(500).json({ error: "Server configuration error: GEMINI_API_KEY is not set." });
    }

    const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
    const { prompt, postType, aspectRatio } = req.body as { prompt: string; postType: PostTypeId; aspectRatio: string; };

    if (!prompt || !postType || !aspectRatio) {
        return res.status(400).json({ error: 'Missing required parameters in request body.' });
    }
    
    try {
        const imageBases64 = await generateImages(ai, prompt, postType, aspectRatio);

        return res.status(200).json({ imageBases64 });

    } catch (error) {
        console.error("Error in /api/generate:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
        return res.status(500).json({ error: `Image generation failed: ${errorMessage}` });
    }
}

async function generateImages(ai: GoogleGenAI, prompt: string, postType: PostTypeId, aspectRatio: string): Promise<string[]> {
    const fullPrompt = `A high-quality, photorealistic image for an Instagram post about: ${prompt}. The image should be visually stunning, engaging, and fit a modern aesthetic. Aspect ratio: ${aspectRatio}.`;
    
    const numberOfImages = postType === 'carousel' ? 5 : 4;

    const response = await ai.models.generateImages({
        model: 'imagen-3.0-generate-002',
        prompt: fullPrompt,
        config: {
            numberOfImages,
            outputMimeType: 'image/jpeg',
            aspectRatio: aspectRatio as "1:1" | "4:3" | "3:4" | "16:9" | "9:16",
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
        return response.generatedImages.map(img => img.image.imageBytes);
    } else {
        throw new Error("No images were generated by the API.");
    }
}